{"version":3,"sources":["Board.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["Tile","tileId","onClick","tileDetails","className","tile_id","Board","boardDetails","tiles","index","push","key","winningCombinations","TicTacToe","props","state","currentPlayer","name","symbol","nextPlayer","isGameOver","movesCount","handleClick","bind","this","updatedDetails","slice","hasOver","hasWon","forEach","c1","c2","c3","isMatched","setState","style","textAlign","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAGMA,G,MAAO,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,YAC/B,OACE,yBAAKC,UAAU,OAAOC,QAASJ,EAAQC,QAAS,kBAAMA,EAAQD,KAC3DE,KAoBQG,EAfD,SAAC,GAEb,IAF4C,IAA7BC,EAA4B,EAA5BA,aAAcL,EAAc,EAAdA,QACvBM,EAAQ,GACLC,EAAQ,EAAGA,GAAS,EAAGA,IAC9BD,EAAME,KACJ,kBAAC,EAAD,CACET,OAAQQ,EACRN,YAAaI,EAAaE,GAC1BP,QAASA,EACTS,IAAKF,KAIX,OAAO,yBAAKL,UAAU,SAASI,ICpB3BI,EAAsB,CAC1B,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IA8EMC,E,kDAhEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXR,aAAc,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/CS,cAAe,CAAEC,KAAM,IAAKC,OAAQ,KACpCC,WAAY,CAAEF,KAAM,IAAKC,OAAQ,KACjCE,YAAY,EACZC,WAAY,GAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBATF,E,wDAYPtB,GAAS,IAAD,EACsBuB,KAAKT,MAArCR,EADU,EACVA,aAAcS,EADJ,EACIA,cACtB,GAA6B,KAAzBT,EAAaN,GAAgB,CAC/B,IAAMwB,EAAiBlB,EAAamB,QACpCD,EAAexB,GAAUe,EAAcE,OACvC,IAAMS,EA5BG,SAAUnB,GACvB,IAAIoB,GAAS,EAMb,OALAhB,EAAoBiB,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAZC,EAAY,KAARC,EAAQ,KACtCC,EACJzB,EAAMsB,IAAOtB,EAAMsB,KAAQtB,EAAMuB,IAAOvB,EAAMsB,KAAQtB,EAAMwB,GAC9DJ,EAASA,GAAUK,KAEdL,EAqBaA,CAAOH,GACvBD,KAAKU,UAAS,SAACnB,GAAD,MAAY,CACxBM,WAAYN,EAAMM,WAAa,EAC/Bd,aAAckB,EACdT,cAAeD,EAAMI,WACrBA,WAAYJ,EAAMC,cAClBI,WAAYO,S,+BAMhB,OAAIH,KAAKT,MAAMK,WAEX,wBAAIe,MAAO,CAAEC,UAAW,WACtB,6BADF,mBAEmBZ,KAAKT,MAAMI,WAAWF,KACvC,6BACA,6BAJF,eAS0B,IAA1BO,KAAKT,MAAMM,WAEX,wBAAIc,MAAO,CAAEC,UAAW,WACtB,6BACA,6BACA,6BAHF,aASF,6BACE,wBAAID,MAAO,CAAEC,UAAW,WAAxB,UACUZ,KAAKT,MAAMC,cAAcC,KADnC,WAGA,kBAAC,EAAD,CACEV,aAAciB,KAAKT,MAAMR,aACzBL,QAASsB,KAAKF,mB,GA1DAe,IAAMC,WCjBfC,EAJH,SAACzB,GACX,OAAO,kBAAC,EAAD,OCQW0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.14c93e83.chunk.js","sourcesContent":["import React from 'react';\nimport './Board.css';\n\nconst Tile = ({ tileId, onClick, tileDetails }) => {\n  return (\n    <div className=\"tile\" tile_id={tileId} onClick={() => onClick(tileId)}>\n      {tileDetails}\n    </div>\n  );\n};\n\nconst Board = ({ boardDetails, onClick }) => {\n  const tiles = [];\n  for (let index = 0; index <= 8; index++) {\n    tiles.push(\n      <Tile\n        tileId={index}\n        tileDetails={boardDetails[index]}\n        onClick={onClick}\n        key={index}\n      />\n    );\n  }\n  return <div className=\"board\">{tiles}</div>;\n};\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\n\nconst winningCombinations = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst hasWon = function (tiles) {\n  let hasWon = false;\n  winningCombinations.forEach(([c1, c2, c3]) => {\n    const isMatched =\n      tiles[c1] && tiles[c1] === tiles[c2] && tiles[c1] === tiles[c3];\n    hasWon = hasWon || isMatched;\n  });\n  return hasWon;\n};\n\nclass TicTacToe extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardDetails: ['', '', '', '', '', '', '', '', ''],\n      currentPlayer: { name: 'A', symbol: 'X' },\n      nextPlayer: { name: 'B', symbol: 'O' },\n      isGameOver: false,\n      movesCount: 0,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(tileId) {\n    const { boardDetails, currentPlayer } = this.state;\n    if (boardDetails[tileId] === '') {\n      const updatedDetails = boardDetails.slice();\n      updatedDetails[tileId] = currentPlayer.symbol;\n      const hasOver = hasWon(updatedDetails);\n      this.setState((state) => ({\n        movesCount: state.movesCount + 1,\n        boardDetails: updatedDetails,\n        currentPlayer: state.nextPlayer,\n        nextPlayer: state.currentPlayer,\n        isGameOver: hasOver,\n      }));\n    }\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return (\n        <h1 style={{ textAlign: 'center' }}>\n          <br />\n          Congratulations {this.state.nextPlayer.name}\n          <br />\n          <br />\n          You Won!!!!\n        </h1>\n      );\n    }\n    if (this.state.movesCount === 9) {\n      return (\n        <h1 style={{ textAlign: 'center' }}>\n          <br />\n          <br />\n          <br />\n          Game Draw\n        </h1>\n      );\n    }\n    return (\n      <div>\n        <h3 style={{ textAlign: 'center' }}>\n          Player {this.state.currentPlayer.name}'s turn\n        </h3>\n        <Board\n          boardDetails={this.state.boardDetails}\n          onClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TicTacToe;\n","import React from 'react';\nimport TicTacToe from './TicTacToe';\n\nconst App = (props) => {\n  return <TicTacToe />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}